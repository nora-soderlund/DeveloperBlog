import { Component } from "react";

import Head from "next/head";
import { withRouter } from "next/router";
import { WithRouterProps } from "next/dist/client/with-router";

import { ArticleResponse } from "Types/Responses";

import API from "Services/API";

import Page from "Components/Page";
import Article from "Components/Article";


type ArticlePageProps = WithRouterProps & {
    slug: string
};

type ArticlePageState = {
    data: ArticleResponse | null
};

class ArticlePage extends Component<ArticlePageProps, ArticlePageState> {
    static async getInitialProps(props: any) {
        return { slug: props.query.slug };
    };

    async componentDidMount(): Promise<void> {
        const article: ArticleResponse | null = await API.getArticleBySlug(this.props.slug);

        this.setState({ data: article }, () => {
            window.addEventListener("hashchange", this.hashDidUpdateListener);

            this.hashDidUpdate();
        });
    };

    componentWillUnmount(): void {
        window.removeEventListener("hashchange", this.hashDidUpdateListener);
    };

    hash: string | undefined = undefined;

    hashDidUpdate(): void {
        const hash = window.location.hash.substring(1);

        if(hash !== this.hash) {
            this.resetPreviousTab();

            this.hash = hash;

            if(hash.length !== 0) {
                const tabElement = document.querySelector(`.article-tab[href="#${hash}"]`);

                if(tabElement != null) {
                    tabElement.classList.add("active");

                    const element = document.getElementById(hash);

                    if(element !== null)
                        element.classList.add("active");
                }
            }
            else {
                const defaultElement = document.querySelector(".article-tab[default]");
        
                if(defaultElement) {
                    defaultElement.classList.add("active");

                    const href: string | null = defaultElement.getAttribute("href");

                    if(href !== null) {
                        const element = document.getElementById(href.substring(1));
                        
                        if(element !== null)
                            element.classList.add("active");
                    }
                }
            }
        }
    };

    hashDidUpdateListener: () => void = () => this.hashDidUpdate();

    resetPreviousTab() {
        const previousElement = document.querySelector(".article-tab.active");
   
        if(previousElement) {
            previousElement.classList.remove("active");

            const href: string | null = previousElement.getAttribute("href");

            if(href === null)
                return;

            const element = document.getElementById(href.substring(1));

            if(element === null)
                return;

            element.classList.remove("active");
        }
    };

    render() {
        return (
            <>
                <Head>
                    <title>Article - Nora SÃ¶derlund&apos;s Developer Blog</title>

                    <meta name="description" content="Generated by create next app" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />

                    <link rel="icon" href="/favicon.ico" />
                </Head>

                <Page>
                    {(this.state?.data)?(
                        <Article data={this.state.data}/>
                    ):(
                        <Article/>
                    )}
                </Page>
            </>
        );
    };
};

export default withRouter(ArticlePage);
